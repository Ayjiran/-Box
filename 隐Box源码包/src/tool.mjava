







import android.animation.Animator;
import android.view.View;
import android.animation.RevealAnimator;
private View view;


public int findgvs(Object v,int id){
  while(true){
    android.view.View idv=i.gvs(v,id+1);
    if(idv==null)
    {
      id+=10000;
      }else{
      return id;
      }
    }
  }







import android.content.ContentUris;
import android.content.Intent;
import android.net.Uri;
import android.provider.DocumentsContract;
import android.provider.MediaStore;
import android.database.Cursor;
import android.content.Context;

public static String getRealPath(Context context, Uri uri)
{
  String imagePath = null;
  if(DocumentsContract.isDocumentUri(context, uri))
  {
    // 如果是document类型的Uri，则通过document id处理            
    String docId = DocumentsContract.getDocumentId(uri);           
    if ("com.android.providers.media.documents".equals(uri.getAuthority()))            
    {                
      String id = docId.split(":")[1];           
      String selection = MediaStore.Images.Media._ID + "=" + id;  
      imagePath = getImagePath(context, MediaStore.Images.Media.EXTERNAL_CONTENT_URI, selection);
    }            
    else if ("com.android.providers.downloads.documents".equals(uri.getAuthority()))            
    {                
      Uri contentUri = ContentUris.withAppendedId(Uri.parse("content://downloads/public_downloads"), Long.valueOf(docId));
      imagePath = getImagePath(context, contentUri, null);
    }
  }
  else if("content".equalsIgnoreCase(uri.getScheme()))
  {
    // content类型普通方式处理
    imagePath = getImagePath(context, uri, null);
  }
  else if("file".equalsIgnoreCase(uri.getScheme()))
  {
    // file类型直接获取图片路径
    imagePath = uri.getPath();
  }
  return imagePath;
}

public String getImagePath(Context context, Uri uri, String selection)
{
  String path = null;
  // 通过Uri和selection来获取真实的图片路径
  Cursor cursor = context.getContentResolver().query(uri, null, selection, null, null);
  if (cursor != null)
  {
    syso(cursor.moveToFirst());
    if (cursor.moveToFirst())
    {
      path = cursor.getString(cursor.getColumnIndex(MediaStore.Images.Media.DATA));
    }
    cursor.close();
  }
  return path;
}









import android.graphics.drawable.BitmapDrawable;
import android.widget.ImageView;
import android.renderscript.Allocation;
import android.renderscript.Element;
import android.renderscript.ScriptIntrinsicBlur;
import android.renderscript.RenderScript;
import android.graphics.Bitmap;

/*
使目标ImageView(图片控件)模糊
img  传入图片控件对象
*/
public void imageViewBlur(ImageView img,int r,int sc)
{
  img.setDrawingCacheEnabled(true);
  Bitmap bmp = Bitmap.createBitmap(img.getDrawingCache());
  img.setDrawingCacheEnabled(false);
  img.setImageBitmap(scriptBlur(bmp,r,sc));
  scriptBlur(bmp,r,sc);
}


/*
使用RenderScript进行模糊处理
bitmap 需要模糊的图片
radius 模糊半径
scale  缩放倍数
返回：模糊后的图片
*/
public Bitmap scriptBlur(Bitmap bitmap, int radius, int scale)
{
  //直接复用传入的bitmap，回收还给用户处理
  bitmap = Bitmap.createScaledBitmap(bitmap, bitmap.getWidth()/scale, bitmap.getHeight()/scale,false);
  
  long startTime = System.currentTimeMillis();
  
  RenderScript rs = RenderScript.create(activity);
  ScriptIntrinsicBlur sb = ScriptIntrinsicBlur.create(rs, Element.U8_4(rs));
  Allocation inp = Allocation.createFromBitmap(rs, bitmap);
  Allocation otp = Allocation.createTyped(rs, inp.getType());
  
  sb.setRadius(radius);
  sb.setInput(inp);
  sb.forEach(otp);
  otp.copyTo(bitmap);

  long endTime = System.currentTimeMillis();
  long useTime = (endTime - startTime);
  //syso("处理用时："+useTime+"ms");
  rs.destroy();
  sb.destroy();
  return bitmap;
}
public void del(String dir){
boolean is=i.fe(dir); 
if(is){
boolean isdel=i.fd(dir);
}
for(Object va:i.fl(dir)){
if(!i.fd(dir+"/"+va)){ 
del(dir+"/"+va);
} 
}
i.fd(dir);
}








import android.app.*;
import android.content.*;
import android.graphics.*;
import android.net.*;
import java.io.*;
import java.net.*;
import android.graphics.drawable.*;

//获取网络图片
	public static BitmapDrawable getintimg(String UrlPath) {  
        Bitmap bm = null;  
        String urlpath = UrlPath;  
        try {  
            URL uri = new URL(urlpath);  
            HttpURLConnection connection = (HttpURLConnection) uri.openConnection();
            connection.setRequestMethod("GET");  
            connection.setReadTimeout(5000);  
            connection.setConnectTimeout(5000);  
            connection.connect();  
			if (connection.getResponseCode() == 200) {  
                InputStream is = connection.getInputStream();  
                bm = BitmapFactory.decodeStream(is);  
            } else {
                bm = null;  
            }  
        } catch (MalformedURLException e) {  
            e.printStackTrace();  
        } catch (IOException e) {  
            e.printStackTrace();  
        }  
        return new BitmapDrawable(bm);  
    }

public void 显示(View 控件)
{
  view=控件;
  创建(控件,控件.getWidth(),控件.getHeight(),0,算对角线(控件.getWidth(),控件.getHeight())).setDuration(2000).start();
  }

public void 隐藏(View 控件)
{
  view=控件;
  Animator 动画 = 创建(控件,控件.getWidth(),控件.getHeight(),算对角线(控件.getWidth(),控件.getHeight()),0);
  动画.addListener(new Animator.AnimatorListener() {
            public void onAnimationStart(Animator animation) {}
            public void onAnimationEnd(Animator animation) {
                view.setVisibility(8);
            }
            public void onAnimationCancel(Animator animation) {}
            public void onAnimationRepeat(Animator animation) {}
        });
      动画.setDuration(2000).start();
  }


public int 算对角线(int w,int h)
{
  return (int) Math.hypot(w,h);
  }
/*
第一个参数是执行揭露动画的 View 视图
第二个参数是相对于视图 View 的坐标系，动画圆的中心的x坐标
第三个参数是相对于视图 View 的坐标系，动画圆的中心的y坐标
第四个参数是动画圆的起始半径，第五个参数动画圆的结束半径。
*/
public RevealAnimator 创建(View clipView,int x,int y,float startRadius,float endRadius)
{
  return new RevealAnimator(clipView,x,y,startRadius,endRadius);
  }


  //ip转整数
  private String intToIp(int i) {
        return (i & 0xFF) + "." + ((i >> 8) & 0xFF) + "." + ((i >> 16) & 0xFF) + "."
                + ((i >> 24) & 0xFF);
    }
  
  
  